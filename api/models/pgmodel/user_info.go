// Code generated by SQLBoiler 4.16.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package pgmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserInfo is an object representing the database table.
type UserInfo struct {
	ID            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserAccountID int         `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	Name          null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Phone         null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	Email         null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Gender        null.String `boil:"gender" json:"gender,omitempty" toml:"gender" yaml:"gender,omitempty"`
	MembershipID  null.Int    `boil:"membership_id" json:"membership_id,omitempty" toml:"membership_id" yaml:"membership_id,omitempty"`
	IsDeleted     bool        `boil:"is_deleted" json:"is_deleted" toml:"is_deleted" yaml:"is_deleted"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt     null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *userInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserInfoColumns = struct {
	ID            string
	UserAccountID string
	Name          string
	Phone         string
	Email         string
	Gender        string
	MembershipID  string
	IsDeleted     string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	UserAccountID: "user_account_id",
	Name:          "name",
	Phone:         "phone",
	Email:         "email",
	Gender:        "gender",
	MembershipID:  "membership_id",
	IsDeleted:     "is_deleted",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var UserInfoTableColumns = struct {
	ID            string
	UserAccountID string
	Name          string
	Phone         string
	Email         string
	Gender        string
	MembershipID  string
	IsDeleted     string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "user_info.id",
	UserAccountID: "user_info.user_account_id",
	Name:          "user_info.name",
	Phone:         "user_info.phone",
	Email:         "user_info.email",
	Gender:        "user_info.gender",
	MembershipID:  "user_info.membership_id",
	IsDeleted:     "user_info.is_deleted",
	CreatedAt:     "user_info.created_at",
	UpdatedAt:     "user_info.updated_at",
	DeletedAt:     "user_info.deleted_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UserInfoWhere = struct {
	ID            whereHelperint
	UserAccountID whereHelperint
	Name          whereHelpernull_String
	Phone         whereHelpernull_String
	Email         whereHelpernull_String
	Gender        whereHelpernull_String
	MembershipID  whereHelpernull_Int
	IsDeleted     whereHelperbool
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpernull_Time
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperint{field: "\"user_info\".\"id\""},
	UserAccountID: whereHelperint{field: "\"user_info\".\"user_account_id\""},
	Name:          whereHelpernull_String{field: "\"user_info\".\"name\""},
	Phone:         whereHelpernull_String{field: "\"user_info\".\"phone\""},
	Email:         whereHelpernull_String{field: "\"user_info\".\"email\""},
	Gender:        whereHelpernull_String{field: "\"user_info\".\"gender\""},
	MembershipID:  whereHelpernull_Int{field: "\"user_info\".\"membership_id\""},
	IsDeleted:     whereHelperbool{field: "\"user_info\".\"is_deleted\""},
	CreatedAt:     whereHelpertime_Time{field: "\"user_info\".\"created_at\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"user_info\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"user_info\".\"deleted_at\""},
}

// UserInfoRels is where relationship names are stored.
var UserInfoRels = struct {
	UserAccount string
}{
	UserAccount: "UserAccount",
}

// userInfoR is where relationships are stored.
type userInfoR struct {
	UserAccount *UserAccount `boil:"UserAccount" json:"UserAccount" toml:"UserAccount" yaml:"UserAccount"`
}

// NewStruct creates a new relationship struct
func (*userInfoR) NewStruct() *userInfoR {
	return &userInfoR{}
}

func (r *userInfoR) GetUserAccount() *UserAccount {
	if r == nil {
		return nil
	}
	return r.UserAccount
}

// userInfoL is where Load methods for each relationship are stored.
type userInfoL struct{}

var (
	userInfoAllColumns            = []string{"id", "user_account_id", "name", "phone", "email", "gender", "membership_id", "is_deleted", "created_at", "updated_at", "deleted_at"}
	userInfoColumnsWithoutDefault = []string{"user_account_id"}
	userInfoColumnsWithDefault    = []string{"id", "name", "phone", "email", "gender", "membership_id", "is_deleted", "created_at", "updated_at", "deleted_at"}
	userInfoPrimaryKeyColumns     = []string{"id"}
	userInfoGeneratedColumns      = []string{}
)

type (
	// UserInfoSlice is an alias for a slice of pointers to UserInfo.
	// This should almost always be used instead of []UserInfo.
	UserInfoSlice []*UserInfo
	// UserInfoHook is the signature for custom UserInfo hook methods
	UserInfoHook func(context.Context, boil.ContextExecutor, *UserInfo) error

	userInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userInfoType                 = reflect.TypeOf(&UserInfo{})
	userInfoMapping              = queries.MakeStructMapping(userInfoType)
	userInfoPrimaryKeyMapping, _ = queries.BindMapping(userInfoType, userInfoMapping, userInfoPrimaryKeyColumns)
	userInfoInsertCacheMut       sync.RWMutex
	userInfoInsertCache          = make(map[string]insertCache)
	userInfoUpdateCacheMut       sync.RWMutex
	userInfoUpdateCache          = make(map[string]updateCache)
	userInfoUpsertCacheMut       sync.RWMutex
	userInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userInfoAfterSelectMu sync.Mutex
var userInfoAfterSelectHooks []UserInfoHook

var userInfoBeforeInsertMu sync.Mutex
var userInfoBeforeInsertHooks []UserInfoHook
var userInfoAfterInsertMu sync.Mutex
var userInfoAfterInsertHooks []UserInfoHook

var userInfoBeforeUpdateMu sync.Mutex
var userInfoBeforeUpdateHooks []UserInfoHook
var userInfoAfterUpdateMu sync.Mutex
var userInfoAfterUpdateHooks []UserInfoHook

var userInfoBeforeDeleteMu sync.Mutex
var userInfoBeforeDeleteHooks []UserInfoHook
var userInfoAfterDeleteMu sync.Mutex
var userInfoAfterDeleteHooks []UserInfoHook

var userInfoBeforeUpsertMu sync.Mutex
var userInfoBeforeUpsertHooks []UserInfoHook
var userInfoAfterUpsertMu sync.Mutex
var userInfoAfterUpsertHooks []UserInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserInfoHook registers your hook function for all future operations.
func AddUserInfoHook(hookPoint boil.HookPoint, userInfoHook UserInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userInfoAfterSelectMu.Lock()
		userInfoAfterSelectHooks = append(userInfoAfterSelectHooks, userInfoHook)
		userInfoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userInfoBeforeInsertMu.Lock()
		userInfoBeforeInsertHooks = append(userInfoBeforeInsertHooks, userInfoHook)
		userInfoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userInfoAfterInsertMu.Lock()
		userInfoAfterInsertHooks = append(userInfoAfterInsertHooks, userInfoHook)
		userInfoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userInfoBeforeUpdateMu.Lock()
		userInfoBeforeUpdateHooks = append(userInfoBeforeUpdateHooks, userInfoHook)
		userInfoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userInfoAfterUpdateMu.Lock()
		userInfoAfterUpdateHooks = append(userInfoAfterUpdateHooks, userInfoHook)
		userInfoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userInfoBeforeDeleteMu.Lock()
		userInfoBeforeDeleteHooks = append(userInfoBeforeDeleteHooks, userInfoHook)
		userInfoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userInfoAfterDeleteMu.Lock()
		userInfoAfterDeleteHooks = append(userInfoAfterDeleteHooks, userInfoHook)
		userInfoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userInfoBeforeUpsertMu.Lock()
		userInfoBeforeUpsertHooks = append(userInfoBeforeUpsertHooks, userInfoHook)
		userInfoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userInfoAfterUpsertMu.Lock()
		userInfoAfterUpsertHooks = append(userInfoAfterUpsertHooks, userInfoHook)
		userInfoAfterUpsertMu.Unlock()
	}
}

// One returns a single userInfo record from the query.
func (q userInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserInfo, error) {
	o := &UserInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "pgmodel: failed to execute a one query for user_info")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserInfo records from the query.
func (q userInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserInfoSlice, error) {
	var o []*UserInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "pgmodel: failed to assign all query results to UserInfo slice")
	}

	if len(userInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserInfo records in the query.
func (q userInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: failed to count user_info rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "pgmodel: failed to check if user_info exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *UserInfo) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	return UserAccounts(queryMods...)
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userInfoL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserInfo interface{}, mods queries.Applicator) error {
	var slice []*UserInfo
	var object *UserInfo

	if singular {
		var ok bool
		object, ok = maybeUserInfo.(*UserInfo)
		if !ok {
			object = new(UserInfo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserInfo))
			}
		}
	} else {
		s, ok := maybeUserInfo.(*[]*UserInfo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserInfo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userInfoR{}
		}
		args[object.UserAccountID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userInfoR{}
			}

			args[obj.UserAccountID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_account`),
		qm.WhereIn(`user_account.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(userAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.UserInfos = append(foreign.R.UserInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.ID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.UserInfos = append(foreign.R.UserInfos, local)
				break
			}
		}
	}

	return nil
}

// SetUserAccount of the userInfo to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.UserInfos.
func (o *UserInfo) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, userInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.ID
	if o.R == nil {
		o.R = &userInfoR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			UserInfos: UserInfoSlice{o},
		}
	} else {
		related.R.UserInfos = append(related.R.UserInfos, o)
	}

	return nil
}

// UserInfos retrieves all the records using an executor.
func UserInfos(mods ...qm.QueryMod) userInfoQuery {
	mods = append(mods, qm.From("\"user_info\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_info\".*"})
	}

	return userInfoQuery{q}
}

// FindUserInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserInfo(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserInfo, error) {
	userInfoObj := &UserInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_info\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "pgmodel: unable to select from user_info")
	}

	if err = userInfoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userInfoObj, err
	}

	return userInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("pgmodel: no user_info provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInfoInsertCacheMut.RLock()
	cache, cached := userInfoInsertCache[key]
	userInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userInfoAllColumns,
			userInfoColumnsWithDefault,
			userInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userInfoType, userInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userInfoType, userInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_info\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_info\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "pgmodel: unable to insert into user_info")
	}

	if !cached {
		userInfoInsertCacheMut.Lock()
		userInfoInsertCache[key] = cache
		userInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userInfoUpdateCacheMut.RLock()
	cache, cached := userInfoUpdateCache[key]
	userInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userInfoAllColumns,
			userInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("pgmodel: unable to update user_info, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_info\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userInfoType, userInfoMapping, append(wl, userInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: unable to update user_info row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: failed to get rows affected by update for user_info")
	}

	if !cached {
		userInfoUpdateCacheMut.Lock()
		userInfoUpdateCache[key] = cache
		userInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: unable to update all for user_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: unable to retrieve rows affected for user_info")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("pgmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userInfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: unable to update all in userInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: unable to retrieve rows affected all in update all userInfo")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("pgmodel: no user_info provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userInfoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userInfoUpsertCacheMut.RLock()
	cache, cached := userInfoUpsertCache[key]
	userInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userInfoAllColumns,
			userInfoColumnsWithDefault,
			userInfoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userInfoAllColumns,
			userInfoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("pgmodel: unable to upsert user_info, could not build update column list")
		}

		ret := strmangle.SetComplement(userInfoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userInfoPrimaryKeyColumns) == 0 {
				return errors.New("pgmodel: unable to upsert user_info, could not build conflict column list")
			}

			conflict = make([]string, len(userInfoPrimaryKeyColumns))
			copy(conflict, userInfoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_info\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userInfoType, userInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userInfoType, userInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "pgmodel: unable to upsert user_info")
	}

	if !cached {
		userInfoUpsertCacheMut.Lock()
		userInfoUpsertCache[key] = cache
		userInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("pgmodel: no UserInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userInfoPrimaryKeyMapping)
	sql := "DELETE FROM \"user_info\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: unable to delete from user_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: failed to get rows affected by delete for user_info")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("pgmodel: no userInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: unable to delete all from user_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: failed to get rows affected by deleteall for user_info")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userInfoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: unable to delete all from userInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "pgmodel: failed to get rows affected by deleteall for user_info")
	}

	if len(userInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserInfo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_info\".* FROM \"user_info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "pgmodel: unable to reload all in UserInfoSlice")
	}

	*o = slice

	return nil
}

// UserInfoExists checks if the UserInfo row exists.
func UserInfoExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_info\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "pgmodel: unable to check if user_info exists")
	}

	return exists, nil
}

// Exists checks if the UserInfo row exists.
func (o *UserInfo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserInfoExists(ctx, exec, o.ID)
}
