// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package pkgmock

import (
	"mysite/pkgs/auth"
	"sync"
)

// Ensure, that JwtHandlerMock does implement auth.JwtHandler.
// If this is not the case, regenerate this file with moq.
var _ auth.JwtHandler = &JwtHandlerMock{}

// JwtHandlerMock is a mock implementation of auth.JwtHandler.
//
//	func TestSomethingThatUsesJwtHandler(t *testing.T) {
//
//		// make and configure a mocked auth.JwtHandler
//		mockedJwtHandler := &JwtHandlerMock{
//			CreateTokenFunc: func() (string, error) {
//				panic("mock out the CreateToken method")
//			},
//			ParseTokenFunc: func(tokenString string, claims auth.Claims) error {
//				panic("mock out the ParseToken method")
//			},
//			WithClaimsFunc: func(claims auth.Claims) auth.JwtHandler {
//				panic("mock out the WithClaims method")
//			},
//		}
//
//		// use mockedJwtHandler in code that requires auth.JwtHandler
//		// and then make assertions.
//
//	}
type JwtHandlerMock struct {
	// CreateTokenFunc mocks the CreateToken method.
	CreateTokenFunc func() (string, error)

	// ParseTokenFunc mocks the ParseToken method.
	ParseTokenFunc func(tokenString string, claims auth.Claims) error

	// WithClaimsFunc mocks the WithClaims method.
	WithClaimsFunc func(claims auth.Claims) auth.JwtHandler

	// calls tracks calls to the methods.
	calls struct {
		// CreateToken holds details about calls to the CreateToken method.
		CreateToken []struct {
		}
		// ParseToken holds details about calls to the ParseToken method.
		ParseToken []struct {
			// TokenString is the tokenString argument value.
			TokenString string
			// Claims is the claims argument value.
			Claims auth.Claims
		}
		// WithClaims holds details about calls to the WithClaims method.
		WithClaims []struct {
			// Claims is the claims argument value.
			Claims auth.Claims
		}
	}
	lockCreateToken sync.RWMutex
	lockParseToken  sync.RWMutex
	lockWithClaims  sync.RWMutex
}

// CreateToken calls CreateTokenFunc.
func (mock *JwtHandlerMock) CreateToken() (string, error) {
	if mock.CreateTokenFunc == nil {
		panic("JwtHandlerMock.CreateTokenFunc: method is nil but JwtHandler.CreateToken was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCreateToken.Lock()
	mock.calls.CreateToken = append(mock.calls.CreateToken, callInfo)
	mock.lockCreateToken.Unlock()
	return mock.CreateTokenFunc()
}

// CreateTokenCalls gets all the calls that were made to CreateToken.
// Check the length with:
//
//	len(mockedJwtHandler.CreateTokenCalls())
func (mock *JwtHandlerMock) CreateTokenCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCreateToken.RLock()
	calls = mock.calls.CreateToken
	mock.lockCreateToken.RUnlock()
	return calls
}

// ParseToken calls ParseTokenFunc.
func (mock *JwtHandlerMock) ParseToken(tokenString string, claims auth.Claims) error {
	if mock.ParseTokenFunc == nil {
		panic("JwtHandlerMock.ParseTokenFunc: method is nil but JwtHandler.ParseToken was just called")
	}
	callInfo := struct {
		TokenString string
		Claims      auth.Claims
	}{
		TokenString: tokenString,
		Claims:      claims,
	}
	mock.lockParseToken.Lock()
	mock.calls.ParseToken = append(mock.calls.ParseToken, callInfo)
	mock.lockParseToken.Unlock()
	return mock.ParseTokenFunc(tokenString, claims)
}

// ParseTokenCalls gets all the calls that were made to ParseToken.
// Check the length with:
//
//	len(mockedJwtHandler.ParseTokenCalls())
func (mock *JwtHandlerMock) ParseTokenCalls() []struct {
	TokenString string
	Claims      auth.Claims
} {
	var calls []struct {
		TokenString string
		Claims      auth.Claims
	}
	mock.lockParseToken.RLock()
	calls = mock.calls.ParseToken
	mock.lockParseToken.RUnlock()
	return calls
}

// WithClaims calls WithClaimsFunc.
func (mock *JwtHandlerMock) WithClaims(claims auth.Claims) auth.JwtHandler {
	if mock.WithClaimsFunc == nil {
		panic("JwtHandlerMock.WithClaimsFunc: method is nil but JwtHandler.WithClaims was just called")
	}
	callInfo := struct {
		Claims auth.Claims
	}{
		Claims: claims,
	}
	mock.lockWithClaims.Lock()
	mock.calls.WithClaims = append(mock.calls.WithClaims, callInfo)
	mock.lockWithClaims.Unlock()
	return mock.WithClaimsFunc(claims)
}

// WithClaimsCalls gets all the calls that were made to WithClaims.
// Check the length with:
//
//	len(mockedJwtHandler.WithClaimsCalls())
func (mock *JwtHandlerMock) WithClaimsCalls() []struct {
	Claims auth.Claims
} {
	var calls []struct {
		Claims auth.Claims
	}
	mock.lockWithClaims.RLock()
	calls = mock.calls.WithClaims
	mock.lockWithClaims.RUnlock()
	return calls
}
